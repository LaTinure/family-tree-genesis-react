// Script pour v√©rifier la configuration Supabase
import { createClient } from '@supabase/supabase-js';

// Remplacez par vos vraies cl√©s Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

console.log('üîç Configuration Supabase:');
console.log('URL:', supabaseUrl);
console.log('Cl√© anonyme:', supabaseKey.substring(0, 20) + '...');

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkSupabaseConfig() {
  try {
    console.log('\nüîê Test de connexion Supabase...');

    // Test 1: V√©rifier la connexion de base
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);

    if (testError) {
      console.error('‚ùå Erreur de connexion:', testError);
      return;
    }

    console.log('‚úÖ Connexion Supabase r√©ussie');

    // Test 2: V√©rifier l'√©tat de l'authentification
    const { data: { user }, error: authError } = await supabase.auth.getUser();

    if (authError) {
      console.log('‚ö†Ô∏è Erreur d\'authentification:', authError.message);
    } else if (user) {
      console.log('‚úÖ Utilisateur authentifi√©:', user.email);
    } else {
      console.log('‚ÑπÔ∏è Aucun utilisateur authentifi√©');
    }

    // Test 3: R√©cup√©rer les profils
    console.log('\nüìä R√©cup√©ration des profils...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .order('created_at', { ascending: false });

    if (profilesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des profils:', profilesError);
      console.log('üí° Cela peut √™tre d√ª √† des permissions RLS (Row Level Security)');
      return;
    }

    console.log('‚úÖ Profils r√©cup√©r√©s avec succ√®s');
    console.log('üìà Nombre de profils:', profiles?.length || 0);

    if (profiles && profiles.length > 0) {
      console.log('\nüë• D√©tails des profils:');
      profiles.forEach((profile, index) => {
        console.log(`${index + 1}. ${profile.first_name} ${profile.last_name}`);
        console.log(`   Email: ${profile.email}`);
        console.log(`   ID: ${profile.id}`);
        console.log(`   R√¥le: ${profile.role_radio}`);
        console.log(`   Patriarche: ${profile.is_patriarch}`);
        console.log(`   Admin: ${profile.is_admin}`);
        console.log('---');
      });
    } else {
      console.log('‚ö†Ô∏è Aucun profil trouv√© dans la base de donn√©es');
    }

    // Test 4: V√©rifier les politiques RLS
    console.log('\nüîí V√©rification des politiques RLS...');
    const { data: policies, error: policiesError } = await supabase
      .rpc('get_policies', { table_name: 'profiles' });

    if (policiesError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les politiques RLS');
    } else {
      console.log('üìã Politiques RLS pour la table profiles:');
      console.log(policies);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

checkSupabaseConfig();
